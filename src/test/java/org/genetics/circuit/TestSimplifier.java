package org.genetics.circuit;

import org.genetics.circuit.circuit.CircuitContextDecorator;
import org.genetics.circuit.circuit.CircuitImpl;
import org.genetics.circuit.circuit.CircuitRandomGenerator;
import org.genetics.circuit.configuration.Configuration;
import org.genetics.circuit.entity.SuiteWrapper;
import org.genetics.circuit.problem.Suite;
import org.genetics.circuit.utils.CircuitUtils;
import org.genetics.circuit.utils.IoUtils;
import org.genetics.circuit.utils.SuiteWrapperUtil;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;


public class TestSimplifier {

    public static final Logger logger = LoggerFactory.getLogger(TestSimplifier.class);

    @Test
    public void testSimplifier() {
        CircuitImpl circuitImpl = IoUtils.base64ToObject("", CircuitImpl.class);
        Suite suite = IoUtils.base64ToObject("rO0ABXNyAC1vcmcuZ2VuZXRpY3MuY2lyY3VpdC5wcm9ibGVtLnZvd2VsLlZvd2VsU3VpdGUAAAAAAAAAAQIAAkwACWV2YWx1YXRvcnQAKExvcmcvZ2VuZXRpY3MvY2lyY3VpdC9wcm9ibGVtL0V2YWx1YXRvcjtMAAt0cmFpbmluZ1NldHQAKkxvcmcvZ2VuZXRpY3MvY2lyY3VpdC9wcm9ibGVtL1RyYWluaW5nU2V0O3hwc3IAMW9yZy5nZW5ldGljcy5jaXJjdWl0LnByb2JsZW0udm93ZWwuVm93ZWxFdmFsdWF0b3IAAAAAAAAAAQIAAHhwc3IAM29yZy5nZW5ldGljcy5jaXJjdWl0LnByb2JsZW0udm93ZWwuVm93ZWxUcmFpbmluZ1NldAAAAAAAAAABAgADSQAJaW5wdXRTaXplSQAKb3V0cHV0U2l6ZUwACXNvbHV0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cAAAAAwAAAAJc3IAE2phdmEudXRpbC5BcnJheUxpc3R4gdIdmcdhnQMAAUkABHNpemV4cAAAAAZ3BAAAAAZzcgAsb3JnLmdlbmV0aWNzLmNpcmN1aXQuc29sdXRpb24uU3RyaW5nU29sdXRpb24AAAAAAAAAAQIAAHhyACZvcmcuZ2VuZXRpY3MuY2lyY3VpdC5zb2x1dGlvbi5Tb2x1dGlvbgAAAAAAAAABAgAAeHEAfgAJAAAAB3cEAAAAB3NyACdvcmcuZ2VuZXRpY3MuY2lyY3VpdC5zb2x1dGlvbi5UaW1lU2xpY2UAAAAAAAAAAQIAAlsABWlucHV0dAACW1pbAAZvdXRwdXRxAH4AD3hwdXIAAltaV48gORS4XeICAAB4cAAAAAwAAQEAAAAAAQABAAF1cQB-ABEAAAAJAAAAAAAAAAAAc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAQEAAHVxAH4AEQAAAAkAAQEBAAEBAAFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAAAAQAAdXEAfgARAAAACQABAQABAQEBAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAEBAAB1cQB-ABEAAAAJAAEBAAABAQEBc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAAEAAHVxAH4AEQAAAAkAAQEAAAAAAQFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAABAQAAdXEAfgARAAAACQABAQABAQAAAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAABAAB1cQB-ABEAAAAJAAAAAAAAAAAAeHNxAH4ACwAAAAt3BAAAAAtzcQB-AA51cQB-ABEAAAAMAAEBAAAAAQAAAQABdXEAfgARAAAACQAAAAAAAAAAAHNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAEBAAB1cQB-ABEAAAAJAAEBAAAAAQEBc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAAEAAHVxAH4AEQAAAAkAAQEAAQEBAQFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAABAQAAdXEAfgARAAAACQABAQABAQEAAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAABAAB1cQB-ABEAAAAJAAEBAQAAAQEBc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAQEAAHVxAH4AEQAAAAkAAQEAAQEBAQFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAAAAQAAdXEAfgARAAAACQABAQAAAAABAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAEBAAB1cQB-ABEAAAAJAAEBAAEBAQABc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAAEAAHVxAH4AEQAAAAkAAQEBAAEAAAFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAABAQAAdXEAfgARAAAACQABAQAAAQABAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAABAAB1cQB-ABEAAAAJAAAAAAAAAAAAeHNxAH4ACwAAAAd3BAAAAAdzcQB-AA51cQB-ABEAAAAMAAEAAAAAAAEAAQABdXEAfgARAAAACQAAAAAAAAAAAHNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAEBAAB1cQB-ABEAAAAJAAEBAQABAQABc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAAEAAHVxAH4AEQAAAAkAAQEAAQEBAQFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAABAQAAdXEAfgARAAAACQABAQAAAQEBAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAABAAB1cQB-ABEAAAAJAAEBAAAAAAEBc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAQEAAHVxAH4AEQAAAAkAAQEAAQEAAAFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAAAAQAAdXEAfgARAAAACQAAAAAAAAAAAHhzcQB-AAsAAAALdwQAAAALc3EAfgAOdXEAfgARAAAADAABAAAAAAEAAAEAAXVxAH4AEQAAAAkAAAAAAAAAAABzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAABAQAAdXEAfgARAAAACQABAQAAAAEBAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAABAAB1cQB-ABEAAAAJAAEBAAEBAQEBc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAQEAAHVxAH4AEQAAAAkAAQEAAQEBAAFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAAAAQAAdXEAfgARAAAACQABAQEAAAEBAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAEBAAB1cQB-ABEAAAAJAAEBAAEBAQEBc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAAEAAHVxAH4AEQAAAAkAAQEAAAAAAQFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAABAQAAdXEAfgARAAAACQABAQABAQEAAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAABAAB1cQB-ABEAAAAJAAEBAQABAAABc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAQEAAHVxAH4AEQAAAAkAAQEAAAEAAQFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAAAAQAAdXEAfgARAAAACQAAAAAAAAAAAHhzcQB-AAsAAAAJdwQAAAAJc3EAfgAOdXEAfgARAAAADAAAAQEAAAAAAAEAAXVxAH4AEQAAAAkAAAAAAAAAAABzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAABAQAAdXEAfgARAAAACQABAQABAQEAAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAABAAB1cQB-ABEAAAAJAQEAAAAAAQEBc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAQEAAHVxAH4AEQAAAAkBAAEBAQABAAFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAAAAQAAdXEAfgARAAAACQABAQABAQABAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAEBAAB1cQB-ABEAAAAJAAEBAAABAAEBc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAAEAAHVxAH4AEQAAAAkAAQEBAAABAAFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAABAQAAdXEAfgARAAAACQABAQABAQEBAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAABAAB1cQB-ABEAAAAJAAAAAAAAAAAAeHNxAH4ACwAAAAh3BAAAAAhzcQB-AA51cQB-ABEAAAAMAQEAAAAAAQEAAQABdXEAfgARAAAACQAAAAAAAAAAAHNxAH4ADnVxAH4AEQAAAAwBAAEAAAAAAQEBAAF1cQB-ABEAAAAJAAAAAAAAAAAAc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAAEAAHVxAH4AEQAAAAkAAQEBAAEBAAFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAABAQAAdXEAfgARAAAACQABAQABAQEBAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAABAAB1cQB-ABEAAAAJAAEBAAABAQEBc3EAfgAOdXEAfgARAAAADAAAAAAAAAAAAQEAAHVxAH4AEQAAAAkAAQEAAAAAAQFzcQB-AA51cQB-ABEAAAAMAAAAAAAAAAAAAQAAdXEAfgARAAAACQABAQABAQAAAXNxAH4ADnVxAH4AEQAAAAwAAAAAAAAAAAEBAAB1cQB-ABEAAAAJAAAAAAAAAAAAeHg=", Suite.class);

        SuiteWrapper suiteWrapper = new SuiteWrapper();
        suiteWrapper.setSuite(suite);

        circuitImpl = CircuitRandomGenerator.randomGenerate(SuiteWrapperUtil.getInputSize(suiteWrapper), 500000, true);
        CircuitContextDecorator ccd = new CircuitContextDecorator(circuitImpl);

        ccd.evaluate(suiteWrapper);

        logger.info("Original: " + ccd.toString());

        long inicio = System.currentTimeMillis();

        if (circuitImpl.size() > 3000) { // This is done in better join, but some time it is better to do it first or we can run out of memory
            CircuitUtils.simplifyByRemovingUnsedPorts(suite.getTrainingSet(), circuitImpl);
        }
        CircuitUtils.betterSimplify(suite.getTrainingSet(), circuitImpl);

        logger.info("Took: " + (System.currentTimeMillis() - inicio));

        CircuitContextDecorator ccd1 = new CircuitContextDecorator(circuitImpl);
        ccd1.evaluate(suiteWrapper);
        logger.info("Simplificado: " + ccd1.toString());

    }

    @Test
    public void testTranslation() {
        assertThat(getPosition(1, 2, 1, 0), equalTo(0L));


        assertThat(getPosition(2, 3, 2, 0), equalTo(0L));
        assertThat(getPosition(2, 3, 2, 1), equalTo(1L));

        // *********************************

        assertThat(getPosition(2, 4, 2, 0), equalTo(0L));
        assertThat(getPosition(2, 4, 2, 1), equalTo(1L));

        assertThat(getPosition(2, 4, 3, 0), equalTo(2L));
        assertThat(getPosition(2, 4, 3, 1), equalTo(3L));
        assertThat(getPosition(2, 4, 3, 2), equalTo(4L));

        // *********************************

        assertThat(getPosition(3, 4, 3, 0), equalTo(0L));
        assertThat(getPosition(3, 4, 3, 1), equalTo(1L));
        assertThat(getPosition(3, 4, 3, 2), equalTo(2L));

        // *********************************

        assertThat(getPosition(2, 5, 2, 0), equalTo(0L));
        assertThat(getPosition(2, 5, 2, 1), equalTo(1L));

        assertThat(getPosition(2, 5, 3, 0), equalTo(2L));
        assertThat(getPosition(2, 5, 3, 1), equalTo(3L));
        assertThat(getPosition(2, 5, 3, 2), equalTo(4L));

        assertThat(getPosition(2, 5, 4, 0), equalTo(5L));
        assertThat(getPosition(2, 5, 4, 1), equalTo(6L));
        assertThat(getPosition(2, 5, 4, 2), equalTo(7L));
        assertThat(getPosition(2, 5, 4, 3), equalTo(8L));

        // 44.999.849.908
        // 5.624.981.238
        int t = 300000; // 704.982.612
        System.out.println(getPosition(14, t, t-1, t-2));


    }


    public static long getPosition(int inputSize, int circuitSize, int index, int reference) {
        if (Configuration.CHECK_CONSISTENCY) {
            if (inputSize <= 0)
                throw new RuntimeException("The circuit must have at least one input port");
            if (reference >= index)
                throw new RuntimeException("Relation must be lower than index");
            if (index < inputSize)
                throw new RuntimeException("Cannot check the input port");
            if (index >= circuitSize)
                throw new RuntimeException("Out of range");
            if (circuitSize <= inputSize)
                throw new RuntimeException("The circuit must have at least one non input port");

        }

        int nonInputIndex = index - inputSize;

        long f = (((long)nonInputIndex * ((long)nonInputIndex - 1l)) / 2l);

        return ((long)nonInputIndex * (long)inputSize) + f + ((long) reference);
    }


}
